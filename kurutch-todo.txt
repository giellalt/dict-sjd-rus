Kurutch sjd-rus

ORDER OF CONVERSIONS TO BE DONE
===============================
1. INFLECTION GROUP

In Kurutch's dict two elements include info on infection:
<stem/> 
  (info on stem gradation [by giving the form for NOM.PL], only for nouns)

<class/> 
  (info on inflection [Roman numeral=class, 
   Arabic numeral=subclass (ablaut), 
   "*" (asterisk) marks some special gradation in verbs, 
   "," (comma) divides class and subclass from each other, 
   translate_linguist2normal("note that in all entries of the dict not all info must be present") 
  ==> this info is optional])

I do not find Kurutch's classes very useful and have to edit it later. However, her analysis should be kept.
I suggest creating an "inflection group" and converting the inflectional stuff as follows

a) (for nouns: i.e. those lemma for which info on <STEM> is provided)
<infl>
   <kur_stem kur_ID="xxx" case="nom" number="pl">x</kur_stem>
   <kur_infl class=" x " ablaut=" x " special=" x "/>
</infl>

b) (for verbs: i.e. those lemma for which there is no info on <STEM> provided)
<infl>
   <kur_infl class=" x " ablaut=" x " special=" x "/>
</infl>

(perhaps test the verb:noun differentiation an bases on the missing <STEM> first? according to the explanations in the original dict it should work though)

+ add a variable case="nompl" to the old <stem> element
+ rename the old <class> element into <kur_infl>
+ split the three different kinds of info from the old <class> element into:
++ a variable for class (=Roman numeral before comma)
++ a variable for ablaut (=Arabic numeral after comma, if there is one)
++ a variable for special [I don't have a better label] (=Asterisk, if there is one)
+ add a variable kur_ID="xxx" (xxx to be specified later when the <LINK TYPE="OT"> is merged, see next task)

two examples
<e kur_ID="207">
      <lg>
         <l pos="n">а̄ррьп</l>
         <infl>
         	<kur_stem kur_ID="xxx" case="nom" number="pl">а̄рьп</kur_stem>
         	<kur_infl class="II" ablaut="1">
         </infl>
      </lg>
      
<e kur_ID="440">
      <lg>
         <l pos="v">ве̄ҏтэдтэ</l>
         <infl>
         	<kur_infl class="I" ablaut="1" special="*">
         </infl>
      </lg>
      
      ==> done
      
=======================================

2. MERGE RULE1 (LINK TYPE="OT"), look at the following example
1st entry
	<E kur_ID="58">
		<L>АДЖЬ</L>
		<STEM>ажь</STEM>
		<CLASS>I,1</CLASS>
		<POS/>
		<T>отец</T>
#
<X>ажьнӣййт</X>
		<XT>оленёнок (самка) или важенка, подаренная отцом (напр. дочери на свадьбу)</XT>
	</E>

2nd entry	
	<E kur_ID="69">
		<L>ажь</L>
		<T>
			<LINK TYPE="OT">аджь</LINK>
		</T>
	</E>
	
-to be merged in a way, that the kur_ID remains in the <infl_group> (see task above): <kur_stem kur_ID="x"
		

Analysis before unification:
sjdrus>grep '<ot_test ' output_kt2gt/kurutch1985_1-1000.xml | sort | uniq -c | sort -nr 
  28          <ot_test stamp="l_t">
   2          <ot_test stamp="l_der_t">
   1          <ot_test stamp="l_t_t">
sjdrus>grep '<sm_test ' output_kt2gt/kurutch1985_1-1000.xml | sort | uniq -c | sort -nr 
 679          <sm_test stamp="l_t">
   1          <sm_test stamp="l_t_t">


@cip: Micha, take a look at these two entries:
   2          <ot_test stamp="l_der_t">

      <E kur_ID="49" link_ot="1" link_sm="0">
        <L>агка</L>
         <DER type="DIM">а̄һкь</DER>
         <T>
            <LINK TYPE="OT">а̄ка</LINK>
         </T>
      </E>

      <E kur_ID="816" link_ot="1" link_sm="0">
        <L>вуэла</L>
         <DER type="DIM">вӯлльгесь</DER>
         <T>
            <LINK TYPE="OT">вуэлэнч</LINK>
         </T>
      </E>

Question: What to do with the <DER>-slot?
@Micha: Cip, <DER> should stay in <lg>
<lg>
…
<l>а̄ка</l> <---this comes from <LINK> (this is pretty clear.)
<infl>
<kur_stem kur_ID="49" case="nom" number="pl">агка</kur_stem> <---this
comes from <L> ( this is pretty clear.)
</infl>
<DER type="DIM">а̄һкь</DER> <---this comes from <DER>
… (This is now clear.)
</lg>

The rest is pretty clear.
    
    
    
@cip: This is to be checked. Some have the index problem attached to the
L-value of an LINK OT entry, some lack diacritica. The interim file
will be checked in.

sjdrus>grep '_conf' _out/kurutsch_interim.xml 
sjdrus>grep '_conf' _out/kurutsch_interim.xml 
            <kur_stem kur_ID="xxx_conflict_xxx" case="nom" number="pl">рӯц</kur_stem>
            <kur_stem kur_ID="xxx_conflict_xxx" case="nom" number="pl">рӯц</kur_stem>
            <kur_stem kur_ID="xxx_conflict_xxx" case="nom" number="pl">тугк</kur_stem>
            <kur_stem kur_ID="xxx_conflict_xxx" case="nom" number="pl">тугк</kur_stem>
            <kur_stem kur_ID="xxx_conflict_xxx" case="nom" number="pl">э̄д</kur_stem>


@cip: indices in an L-element of the LINK OT type do not make sense,
and as one can see here, they just make truble for processing.

kurutch>grep '>рӯц\-1\,\-2<' *.xml 
kurutch1985_5001-6000.xml:		<L xxx="please_correct_me">рӯц-1,-2</L>

 ==> the conflict problems are now done
 
 @cip: DERivation element checked in all three types of entries before
 merging: no danger of overwriting, merging can be done just as a
 copying of DER element from the LINK OT entry into the content entry,
 without any further checks
	
 Sub-task: merge the info in the DER-element of the LINK OT entry with
	that from the pendant content entry.

      ==> done

================================

@cip: proper tests before merging of LINK SM entries:

First test: It the mapping of LINK SM entries into content entries exhaustive?

From a total of 5659 LINK SM entries:

   sjdrus>grep '<merge_target' _out/kurutsch_interim.xml | wc -l 
       5659

there are 5485 LINK SM entries that have exactly one T element and
some corresponent content entry has been found for the same L string:

   sjdrus>grep '<merge_target t_count="1">' _out/kurutsch_interim.xml | wc -l 
       5485

there are 6 LINK SM entries that have exactly two T elements and
some corresponent content entry has been found for the same L string:

   sjdrus>grep '<merge_target t_count="2">' _out/kurutsch_interim.xml | wc -l 
       6

BUT ... for 168 LINK SM entries there is no correspondent content
entry found:

   sjdrus>grep '<merge_target t_count="1"/>' _out/kurutsch_interim.xml | wc -l 
        168

For the sake of completness, I did this test too: there is no LINK SM
   with two T elements but lacking a content entry:

   sjdrus>grep '<merge_target t_count="2"/>' _out/kurutsch_interim.xml | wc -l 
        0

Addition test: 6 + 168 + 5485 = 5659 (the total sum of LINK SM
entries, i.e. nothing missed)

Ergo: The mapping is not exhaustive.
Problematic cases: 168 LINK SM entries without match (check for wrong
spelling, weird indices, etc.)

Second test: Is the mapping of LINK SM entries unambiguous? Micha
aluded to ambiguosity when doing string comparison (see MERGE RULE 2 below).

For the total of 5485 single links and  6 double links that have
corresponding content entries, there should be 5485 + 12 = 5497
content entry pointers.

The number found is 5501, there is some ambiguosity but manually correctable
   sjdrus>grep '<sm_target' _out/kurutsch_interim.xml | wc -l 
       5501

Mark the ambiguous cases
     ==> done:

Here is the improved test:

sjdrus>grep '<merge_target' _out/kurutsch_interim.xml | sort | uniq -c | sort -nr 
5481          <merge_target t-element_count="1" link-match_count="1">
   ===> ideal cases 
 168          <merge_target t-element_count="1" link-match_count="0"/>
   ===> problematic cases: LINK SM entries without corresponding
   	      content entries (typos, weird indices, etc.)
   6          <merge_target t-element_count="2" link-match_count="2">
   ===> ideal cases (I assume that) 
   4          <merge_target t-element_count="1" link-match_count="2">
   ===> ambiguous cases: these have to be checked and corrected manually 

@cip: All checks should be done in the interim-file.   
     
3. MERGE RULE 2 (LINK TYPE="SM")
merge of original reference entries (i.e. having a kur_ID) with content entries (i.e. without ID) 
trigger: string (watch out for ambiguities)

to be solved according to the following rules
-find two entries of the following type
1st entry:   
   <E kur_ID="3">
		<L>аббрай</L>
		<T>
			<LINK TYPE="SM">аббьр</LINK>
		</T>
	</E>
2nd entry:
	<E>
		<L>аббрай</L>
		<POS>PRED</POS>
		<T>дождливый, дождлив</T>
		<X>ке̄ссь ля̄йй аббрай</X>
		<XT>лето было дождливым</XT>
	</E>
-these entry pairs always:
++have two similar contents in <L>
++1st entry has a kur_ID, 2nd entry doesn't
++1st entry has a mixed T-element with text and LINK children (@cip:
really, I don't belive that, ergo: I have to check it), 2nd entry doesn't
-merge these two entries into one entry, as in the following example
   <E kur_ID="3">
		<L>аббрай</L>
		<POS>PRED</POS>
		<DER type="SM">аббьр</DER>
		<T>дождливый, дождлив</T>
		<X>ке̄ссь ля̄йй аббрай</X>
		<XT>лето было дождливым</XT>
	</E>
	
	==> TODO


==================
5. RE GROUPS
5a. conversion of parentheses inside <t>
if the text in parentheses start with either the word "(о " or "(об " it should be converted into an <re> element with scope on <tg>

	==> TODO

5b. a few other <re>s (formely in parentheses inside <t>) have been tagged manually as ___RE x RE___ and should likewise be converted into an <re> element with scope on <tg> (see above)

	==> TODO
	
==================
6. TE GROUPS	
5a.if the text in parentheses start with the word "(напр. " it should be converted into an <te> element with scope on <tg>
(@cip: As an interim solution, I will put this
into some attributes to the t-element under scrutiny!!! This is
because of the unclear status of te-element in the gt_dict.)

    ==> TODO

6b. a few other <te>s (formely in parentheses inside <t>) have been tagged manually as ___TE x TE___ and should likewise be converted into an <te> element with scope on <tg> (see above)

	==> TODO
	
====================
7. ASPEKT PAIRS
aspect pairs in <t> are always marked by / (slash), perfective aspect seems always to be first, e.g.
<t>покрывать / покрыть</t>
is to be converted into -->
<t aspect="perf">покрывать</t>
<t aspect="imperf">покрыть</t>

  ==> TODO

==================
8. GENDER/NUMBER TAGS
the tags x_GENDER (z.B. F_GENDER, etc.) x_NUMBER (z.B. PL_NUMBER, etc.) should be transfered into an attribute of <t>;
@cip: Can we assume that sjd-lemma's pos is n, too?
@micha: Yes, we can, but…
I found only one mistake
<e kur_ID="xxx">
      <lg>
         <l pos="n">ве̄кьхуввэ</l>
         <class>I</class>
      </lg>
      <mg km="g">
         <semantics>
            <stype>xxx</stype>
         </semantics>
         <tg>
            <t>получить помощь F_GENDER</t>
         </tg>
         <xg>
            <x>со̄нн ве̄кьхувв ӣжесь па̄ррнэнҍ</x>
            <xt>он получает помощь от детей</xt>
         </xg>
      </mg>
   </e>
<l> is a verb (even according to the old PoS rules because it ends on -уввэ)
the problem: F_GENDER here tags only one part of the phrasal translation

  ==> TODO

====================================
4. LEXICON GROUP
there is a lot of comprehensive lexicon-like information included in the translations, these should go into a new group under <mg>
rule: convert text between the tags ___LEXICON x LEXICON___ into 
<mg>
<lex_group>
<lexicon>x</lexicon>
</lex_group>
</mg>
Example
<e kur_ID="6674">
      <lg>
         <l pos="MEZHD">уш-уш-уш</l>
      </lg>
      <mg km="g">
         <semantics>
            <stype>xxx</stype>
         </semantics>
         <lex_group>
         <lexicon>возглас при ощущении холода</lex>
         </lex_group>
         <tg>
            <t>ой!</t>
            <t>ух!</t>
         </tg>
      </mg>
   </e>
   
  ==> TODO (LATER; THIS TASK MOVES LOWER IN THE HIERARCHY OF IMPORTANCE)


=============================================
9. DIFFERENT THINGS (TO THINK ABOUT…)

(z. 324: scopus mg-element, according to our discussion from 08.03.2011) 
<RE>PRJAM,PEREN</RE> / <RE>PRJAM_PEREN</RE> / <RE>PEREN</RE> / etc.
Scope remains as we discussed, but I have re-tagged this element (because <RE> is needed for another element)
___VERSCH_BED___ Scope is mg
___ÜBERTRAGEN___ Scope is mg (<-- <RE>PEREN</RE>)
___AUCH_ÜBERTRAGEN___ Scope is mg (<-- <RE>TOZHE_PEREN</RE>)
___WÖRTLICH+ÜBERTRAGEN___ Scope is mg (<-- <RE>PRJAM_PEREN</RE>)
 ==> TODO
 
the preliminary tag LOOKUP marks a pointer to Kildin words in Russian text elements, e.g.
выделывать / выделать (шкуру крюком ___LOOKUPкрӯһкь___LOOKUP)
this should somehow be converted into a link inside the final dict, like
выделывать / выделать (шкуру крюком <LOOKUP xml:lang="sjd">крӯһкь</LOOKUP>
  ==> TODO


====================================
@cip: this, I have to check:

check T-elements with mixed node types as children: both
text-nodes and LINK-element nodes.

 ==> TODO?

==================================
==================================
CONVERSIONS WHICH ARE DONE ALREADY

2. gt_dict structure: mapping like in the following example:
   
<e kur_ID="xxx">
	<lg>
		<l pos="xxx">xxx</l>
		<STEM>xxx</STEM> (1-100: z. 55)
		<CLASS>xxx</CLASS> (1-100: z. 56)
	</lg>
	<mg>
     	<semantics>
			<sem class="xxx"/>
		</semantics>

     <tg>
  ==> done
  
		 (1-100: z. 72, komma mapped on different t-elements)   ==> done
		 
         (1-100: z. 1348, semicolon mapped on different tg-elements)   ==> done
		 
		 (z. 136: different meaning groups: @cip: relevant order???) @micha: order was probably relevant for the authers of the original dict; wenn es mehrere Bedeutungen gibt (im Sinne von unseren <mg>), habe ich die Nummerierung der Übersetzungen aus dem Original behalten (tnumber="x"). Die Autoren des Originalwörterbuches haben sich wahrscheinlich bei der Reihenfolge der verschiedenen Bedeutungen etwas gedacht. Deshalb wollte ich gern diese Angabe behalten. ==> done
		 
TAM-element = grammar info (aspect, etc.); scopus is mg-element
(according to our discussion from 08.03.2011)!!!   ==> done

examples of <x> with several translations:
(101-500: z. 3258)
		<X>ва̄лльтэ ва̄лт</X>
		<XT xtnumber="1">завоевать свободу</XT>
		<XT xtnumber="2">стать своевольным</XT>
			
            <xg type=idiom subtype=blabla>
				<x>xxx</x>
				<xt xml:lang="xxx">xxx</xt>
			</xg>
  ==> done

example for idiom subtype (idiom groups are preliminary marked by # preceeding the whole group; idioms are always at the end of an <e> or <mg> (no other <x> following them):		

<X>парна бальяк, шӯрран — лӯјкак</X>
		<XT>POSLOVICA [ребёнка] маленького балуешь - с большим плачешь</XT>

		</tg>
	</mg>
</e>

  ==> done

non-capitals in the element <L>

  ==> done


===============

-warum haben <re>, <te>, <tf>, <xt> kein Sprachattribut, aber <t>
 schon (z.B. xml:lang="nob")? Wenn wir schon wissen, dass es
 sma<-->nob ist brauchen wir eigentlich gar keins. Aber wenn wir
 zeigen wollen, dass der folgende Text zu einer bestimmten Sprache
 gehört, ist das für <xt> usw. doch auch relevant. @cip: ich habe
 gelernt, flexibel damit zu sein. Wir werden sehen, wie sich das
 kristallisiert, wenn wir wirklich in Richtung Cip's dream gehen.
 
===============

Hier sind die Muster von den gemischten Knoten.
sjdrus>grep '<todo ' output_kt2gt/kurutch1985_1-1000.xml | sort | uniq -c | sort -nr  
 171          <todo n_pattern="txt_tam">
 108          <todo n_pattern="txt_tam_tam">
  36          <todo n_pattern="re_txt">
  14          <todo n_pattern="re_txt_tam">
   6          <todo n_pattern="re_txt_tam_tam"
--------------------------------------
   4          <todo n_pattern="txt_link"> (darueber haben wir jetzt geredet)
-->these are two different problems, which I fixed manually
-->1)since the scopus of the first of these "links" is the lemma and since it gives grammatic information I've created a new element for these things: <DER> =derivation; this new element belongs to <lg>, e.g.
<DER type="STRAD_K">балъе</DER>
and reads as follows:
DER of the type "strad_k" of the verb "балъе"
-->2)for the other "link" I've also created a new element in <lg>:
<COMPARE>; it points to another lemma with the same meaning,
e.g. <COMPARE>камаша</COMPARE>

@cip: if the t-element has the value "xxx" this solution is fine but
if not then there is a scope problem: is this information in addition
to whatever is the t-element translation or not?  If not does that
mean to create a new meaning group with a new tg and a new t
especially for this pointer? If yes how to display it (possible
problem: there might be several translation groups divided by
semicolon -- at the momet, I am working just with the first file)

	<E kur_ID="276">
		<L>БОТИНКА</L>
		<STEM>о.ч.</STEM>
		<CLASS>IV</CLASS>
		<POS/>
		<COMPARE>камаша</COMPARE>
		<T>ботинки PL_NUMBER (ед. ботинок M_GENDER)</T>
		<X>вуэссьтэ о̄дт ботинкатҍ </X>
		<XT>купить новые ботинки</XT>


Best example of underspecification wrt. this pointer:

	<E>
		<L>выннлэнне</L>
		<COMPARE>вынна</COMPARE>
		<T tnumber="1">косо, криво ; наклонно</T>
		<T tnumber="2">навстречу друг другу (наискосок)</T>
		<X>выннлэнне мэ̄нэмь, ка̄нҍц ка̄ннцан ебпь то̄ммтма</X>
		<XT>[мы] навстречу друг другу шли, а друг друга не узнали</XT>
	</E>
	<E kur_ID="925">

What should I compare to вынна: the first mg (косо, криво ; наклонно),
the first tg from the first mg (косо, криво), the first t of the first tg of
the first mg (косо), and so on?

The same hold also for <DER>-elements.

@cip: as agreed on 08.03.2011, this will be underspecified outside the mg groups

	==> done

=====================================
   2          <todo n_pattern="sem_txt"> (??? --> take a look!)
--> this belongs to the element <SEM> = semantics, e.g. MEDicine, RELigion; scopus should be the meaning group; you have created this element "semantics" already with xxx, for a few entries (like these) a value is given in the dict 
--------------------------------------
   2          <todo n_pattern="pos_txt">  (??? --> take a look!)
-->fixed manually (lexicographically odd entry in the original dict (one lemma which is both adverb and postposition; I made two entries)
--------------------------------------
   1          <todo n_pattern="txt_tam_txt_tam">  (check scope of tam!)
-->fixed manually (lexicographically odd entry in the original dict (one meaning group with different meanings; I made two meaning groups)
--------------------------------------   
   1          <todo n_pattern="txt_tam_txt"> (check scope of tam!)
-->fixed manually (mistake in my original tagging)
--------------------------------------
   1          <todo n_pattern="txt_tam_tam_tam">
-->just one more tam as compared to "re_txt_tam_tam" above
--------------------------------------
   1          <todo n_pattern="txt_saam_link_txt_class_txt">   (??? --> take a look!)
-->fixed manually (lexicographically odd entry in the original dict: one entry with two lemmas; I made two entries)
--------------------------------------
   1          <todo n_pattern="re_txt_tam_tam_tam">
-->just one more tam as compared to "re_txt_tam_tam" above

	==> done

===================================

sjdrus>grep '<todo ' output_kt2gt/kurutch1985_1-1000.xml | sort | uniq -c | sort -nr   173          <todo n_pattern="txt_tam">
 108          <todo n_pattern="txt_tam_tam">
  36          <todo n_pattern="re_txt">
  14          <todo n_pattern="re_txt_tam">
   6          <todo n_pattern="re_txt_tam_tam">
   2          <todo n_pattern="sem_txt">
   1          <todo n_pattern="txt_tam_tam_tam">
   1          <todo n_pattern="re_txt_tam_tam_tam">
   
   ==> done

===================================

refinements on parsing mixed content stuff:

sjdrus>grep '<todo ' output_kt2gt/kurutch1985_1-1000.xml | grep -v X1 
         <todo stamp="re_txtX2">
         <todo stamp="re_txtX2_tam_tam">
         <todo stamp="txtX2_tam_tam">
         <todo stamp="txtX2_tam_tam">
         <todo stamp="txtX2_tam_tam">
         <todo stamp="txtX2_tam_tam">
         <todo stamp="txtX2_tam">
         <todo stamp="txtX2_tam">
         <todo stamp="txtX2_tam">
         <todo stamp="txtX2_tam">
         <todo stamp="txtX2_tam_tam">

This is important: please check whether the scope of tam and re is ok
in these cases, Michael!

		==> done

===================================
Is # ok in the T-element? I thought that # is the special sign marking
the idioms. Please check!

	<E>
		<L>воаррдэ</L>
		<STEM/>
		<CLASS>III</CLASS>
		<POS/>
		<T># бывать, побывать (где-л.)</T>
		<X>воаррдэ клӯбпе, библиотекая</X>
		<XT>бывать в клубе, в библиотеке</XT>
	</E>
	==> DONE


====================================

 - parse mixed content along the lines for examples with # marking for idioms
 testit : grep          <xg type="idiom"> in the output file
 ==> done
      
